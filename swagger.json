{
    "swagger": "2.0",
    "basePath": "/",
    "paths": {
    "/auth/login": {
    "post": {
    "responses": {
    "200": {
    "description": "Login successful"
    },
    "401": {
    "description": "Invalid credentials"
    }
    },
    "summary": "Login and get access token",
    "operationId": "login_user",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Login"
    }
    }
    ],
    "tags": [
    "auth"
    ]
    }
    },
    "/auth/register": {
    "post": {
    "responses": {
    "201": {
    "description": "User registered successfully"
    },
    "400": {
    "description": "Validation error"
    }
    },
    "summary": "Register a new user",
    "operationId": "register_user",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Register"
    }
    }
    ],
    "tags": [
    "auth"
    ]
    }
    },
    "/property/properties": {
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "List all properties",
    "operationId": "list_properties",
    "tags": [
    "property"
    ]
    },
    "post": {
    "responses": {
    "201": {
    "description": "Property created"
    }
    },
    "operationId": "create_property",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Property"
    }
    }
    ],
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "delete": {
    "responses": {
    "204": {
    "description": "Property deleted"
    },
    "403": {
    "description": "Unauthorized - Only property owner can delete"
    },
    "404": {
    "description": "Property not found"
    }
    },
    "summary": "Delete a property (Property owner only)",
    "operationId": "delete_property",
    "tags": [
    "property"
    ]
    },
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    },
    "404": {
    "description": "Property not found"
    }
    },
    "summary": "Get a specific property",
    "operationId": "get_property",
    "tags": [
    "property"
    ]
    },
    "put": {
    "responses": {
    "200": {
    "description": "Property updated"
    },
    "403": {
    "description": "Unauthorized - Only property owner can update"
    },
    "404": {
    "description": "Property not found"
    }
    },
    "summary": "Update a property (Property owner only)",
    "operationId": "update_property",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Property"
    }
    }
    ],
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/comments": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Get all comments for a property",
    "operationId": "get_property_comments",
    "tags": [
    "property"
    ]
    },
    "post": {
    "responses": {
    "201": {
    "description": "Comment created"
    }
    },
    "summary": "Add a comment to a property",
    "operationId": "create_property_comment",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Comment"
    }
    }
    ],
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/inquiries": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Get all inquiries for a property",
    "operationId": "get_property_inquiries",
    "tags": [
    "property"
    ]
    },
    "post": {
    "responses": {
    "201": {
    "description": "Inquiry created"
    }
    },
    "summary": "Create a new inquiry for a property (Customer only)",
    "operationId": "create_property_inquiry",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Inquiry"
    }
    }
    ],
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/likes": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Get all likes for a property",
    "operationId": "get_property_likes",
    "tags": [
    "property"
    ]
    },
    "post": {
    "responses": {
    "201": {
    "description": "Like created"
    },
    "400": {
    "description": "Already liked"
    }
    },
    "summary": "Add a like to a property",
    "operationId": "create_property_like",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/Like"
    }
    }
    ],
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/photos": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Get all photos for a property",
    "operationId": "get_property_photos",
    "tags": [
    "property"
    ]
    },
    "post": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Upload photos for a property",
    "operationId": "post_property_photos",
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/photos/{photo_id}": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    },
    {
    "name": "photo_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "delete": {
    "responses": {
    "204": {
    "description": "Photo deleted"
    },
    "404": {
    "description": "Photo not found"
    }
    },
    "summary": "Delete a property photo (Broker/Admin only)",
    "operationId": "delete_property_photo",
    "tags": [
    "property"
    ]
    }
    },
    "/property/properties/{property_id}/status": {
    "parameters": [
    {
    "name": "property_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "put": {
    "responses": {
    "200": {
    "description": "Status updated"
    },
    "403": {
    "description": "Unauthorized - Only property owner can update status"
    }
    },
    "summary": "Update property status (Property owner only)",
    "operationId": "update_property_status",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/PropertyStatus"
    }
    }
    ],
    "tags": [
    "property"
    ]
    },
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    }
    },
    "summary": "Get property status",
    "operationId": "get_property_status",
    "tags": [
    "property"
    ]
    }
    },
    "/user/users": {
    "get": {
    "responses": {
    "200": {
    "description": "Success",
    "schema": {
    "$ref": "#/definitions/UserList"
    }
    },
    "403": {
    "description": "Forbidden - Admin access required",
    "schema": {
    "$ref": "#/definitions/Error"
    }
    }
    },
    "description": "List all users (Admin only)",
    "operationId": "list_users",
    "security": [
    {
    "Bearer Auth": []
    }
    ],
    "tags": [
    "user"
    ]
    },
    "post": {
    "responses": {
    "201": {
    "description": "User created",
    "schema": {
    "$ref": "#/definitions/User"
    }
    },
    "400": {
    "description": "Validation error",
    "schema": {
    "$ref": "#/definitions/Error"
    }
    },
    "403": {
    "description": "Forbidden - Admin access required",
    "schema": {
    "$ref": "#/definitions/Error"
    }
    },
    "409": {
    "description": "Conflict - email/username already exists",
    "schema": {
    "$ref": "#/definitions/Error"
    }
    }
    },
    "description": "Create a new user account (Admin only)",
    "operationId": "create_user",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/User"
    }
    }
    ],
    "security": [
    {
    "Bearer Auth": []
    }
    ],
    "tags": [
    "user"
    ]
    }
    },
    "/user/users/{user_id}": {
    "parameters": [
    {
    "name": "user_id",
    "in": "path",
    "required": true,
    "type": "integer"
    }
    ],
    "delete": {
    "responses": {
    "204": {
    "description": "User deleted"
    },
    "404": {
    "description": "User not found"
    }
    },
    "summary": "Delete a user (Admin only)",
    "operationId": "delete_user",
    "tags": [
    "user"
    ]
    },
    "get": {
    "responses": {
    "200": {
    "description": "Success"
    },
    "404": {
    "description": "User not found"
    }
    },
    "summary": "Get a specific user",
    "operationId": "get_user",
    "tags": [
    "user"
    ]
    },
    "put": {
    "responses": {
    "200": {
    "description": "User updated"
    },
    "404": {
    "description": "User not found"
    }
    },
    "summary": "Update a user",
    "operationId": "update_user",
    "parameters": [
    {
    "name": "payload",
    "required": true,
    "in": "body",
    "schema": {
    "$ref": "#/definitions/User"
    }
    }
    ],
    "tags": [
    "user"
    ]
    }
    }
    },
    "info": {
    "title": "RentApp API",
    "version": "1.0",
    "description": "A complete API for property rental management"
    },
    "produces": [
    "application/json"
    ],
    "consumes": [
    "application/json"
    ],
    "tags": [
    {
    "name": "auth",
    "description": "Authentication endpoints for RentApp"
    },
    {
    "name": "property",
    "description": "Property management endpoints for RentApp"
    },
    {
    "name": "user",
    "description": "User management endpoints for RentApp"
    }
    ],
    "definitions": {
    "Register": {
    "required": [
    "email",
    "password",
    "role",
    "username"
    ],
    "properties": {
    "username": {
    "type": "string",
    "description": "Username (3-50 characters)",
    "minLength": 3,
    "maxLength": 50
    },
    "email": {
    "type": "string",
    "description": "Valid email address",
    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    },
    "password": {
    "type": "string",
    "description": "Password (minimum 6 characters)",
    "minLength": 6
    },
    "phone_number": {
    "type": "string",
    "description": "Phone number (digits only, max 15)",
    "maxLength": 15
    },
    "role": {
    "type": "string",
    "description": "User role",
    "example": "admin",
    "enum": [
    "admin",
    "broker",
    "customer"
    ]
    }
    },
    "type": "object"
    },
    "Login": {
    "required": [
    "email",
    "password"
    ],
    "properties": {
    "email": {
    "type": "string",
    "description": "Registered email address"
    },
    "password": {
    "type": "string",
    "description": "Account password"
    }
    },
    "type": "object"
    },
    "Property": {
    "required": [
    "address",
    "bathrooms",
    "bedrooms",
    "broker_id",
    "city",
    "price",
    "property_type",
    "state",
    "title",
    "zip_code"
    ],
    "properties": {
    "id": {
    "type": "integer",
    "description": "Property ID",
    "readOnly": true,
    "example": 1
    },
    "title": {
    "type": "string",
    "description": "Property title",
    "example": "Beautiful 3-bedroom apartment"
    },
    "description": {
    "type": "string",
    "description": "Property description",
    "example": "Spacious apartment in the city center"
    },
    "price": {
    "type": "number",
    "description": "Property price",
    "example": 1500
    },
    "address": {
    "type": "string",
    "description": "Property address",
    "example": "123 Main St"
    },
    "city": {
    "type": "string",
    "description": "City",
    "example": "New York"
    },
    "state": {
    "type": "string",
    "description": "State",
    "example": "NY"
    },
    "zip_code": {
    "type": "string",
    "description": "ZIP code",
    "example": "10001"
    },
    "property_type": {
    "type": "string",
    "description": "Type of property",
    "example": "apartment",
    "enum": [
    "apartment",
    "house"
    ]
    },
    "bedrooms": {
    "type": "integer",
    "description": "Number of bedrooms",
    "example": 3
    },
    "bathrooms": {
    "type": "integer",
    "description": "Number of bathrooms",
    "example": 2
    },
    "square_feet": {
    "type": "integer",
    "description": "Square footage",
    "example": 1200
    },
    "broker_id": {
    "type": "integer",
    "description": "Broker ID",
    "example": 1
    },
    "created_at": {
    "type": "string",
    "format": "date-time",
    "description": "Creation date",
    "readOnly": true,
    "example": "2025-01-01T00:00:00Z"
    }
    },
    "type": "object"
    },
    "Inquiry": {
    "required": [
    "customer_id",
    "message"
    ],
    "properties": {
    "customer_id": {
    "type": "integer",
    "description": "Customer ID"
    },
    "message": {
    "type": "string",
    "description": "Inquiry message"
    }
    },
    "type": "object"
    },
    "Like": {
    "required": [
    "user_id"
    ],
    "properties": {
    "user_id": {
    "type": "integer",
    "description": "User ID"
    }
    },
    "type": "object"
    },
    "PropertyStatus": {
    "required": [
    "status"
    ],
    "properties": {
    "status": {
    "type": "string",
    "description": "Property status",
    "example": "available",
    "enum": [
    "available",
    "rented",
    "pending"
    ]
    }
    },
    "type": "object"
    },
    "Comment": {
    "required": [
    "content",
    "user_id"
    ],
    "properties": {
    "user_id": {
    "type": "integer",
    "description": "User ID"
    },
    "content": {
    "type": "string",
    "description": "Comment content"
    }
    },
    "type": "object"
    },
    "User": {
    "required": [
    "email",
    "role",
    "username"
    ],
    "properties": {
    "id": {
    "type": "integer",
    "description": "User ID",
    "readOnly": true,
    "example": 1
    },
    "username": {
    "type": "string",
    "description": "Username (3-50 characters)",
    "example": "john_doe",
    "minLength": 3,
    "maxLength": 50
    },
    "email": {
    "type": "string",
    "description": "Email address",
    "example": "john@example.com",
    "pattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    },
    "phone_number": {
    "type": "string",
    "description": "Phone number (digits only, max 15)",
    "example": "1234567890",
    "maxLength": 15
    },
    "role": {
    "type": "string",
    "description": "User role",
    "example": "customer",
    "enum": [
    "admin",
    "broker",
    "customer"
    ]
    },
    "created_at": {
    "type": "string",
    "format": "date-time",
    "description": "Account creation date",
    "readOnly": true,
    "example": "2025-01-01T00:00:00Z"
    }
    },
    "type": "object"
    },
    "UserList": {
    "properties": {
    "users": {
    "type": "array",
    "items": {
    "$ref": "#/definitions/User"
    }
    }
    },
    "type": "object"
    },
    "Error": {
    "properties": {
    "message": {
    "type": "string",
    "description": "Error message",
    "example": "An error occurred"
    }
    },
    "type": "object"
    }
    },
    "responses": {
    "ParseError": {
    "description": "When a mask can't be parsed"
    },
    "MaskError": {
    "description": "When any error occurs on mask"
    }
    }
    }